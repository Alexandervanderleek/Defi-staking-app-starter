{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Admin\\\\OneDrive\\\\Desktop\\\\blockchainstuff\\\\EthDevTut1\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\components\\\\App.js\";\n//main application where render everything core output (mothership)\nimport React, { Component } from \"react\";\nimport './App.css';\nimport Navbar from \"./Navbar\";\nimport Web3 from \"web3\";\nimport Tether from \"../truffle_abis/Tether.json\";\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('no eth browser detected, lookup meta mask');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var w3, account, networkId, tetherData, tether, tetherBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                w3 = window.web3;\n                _context3.next = 3;\n                return w3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                });\n                _context3.next = 7;\n                return w3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //load the contract\n                tetherData = Tether.networks[networkId]; // pulled from the json\n\n                if (tetherData) {\n                  tether = web3.eth.Contract(Tether.abi, tetherData.address);\n                  this.setState({\n                    tether: tether\n                  });\n                  tetherBalance = tether.methods.balanceOf(this.state.account); //make it a let cause changing variable\n                }\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadContracts\",\n    value: function () {\n      var _loadContracts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function loadContracts() {\n        return _loadContracts.apply(this, arguments);\n      }\n\n      return loadContracts;\n    }() //props part of react allow to parse over info\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralBank: {},\n      tetherBalance: '0',\n      rwdBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  } // we parse the this.state.account to navbar\n  //react code goes in here \n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return (\n        /*#__PURE__*/\n        //divs are just containers that can include styles, e.g text-centre comes from bootstrap\n        React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Navbar, {\n          account: this.state.account,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"text-center\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }\n        })))\n      );\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App; //class name invokes bootstrap styles seen in index.js\n\n/*   this way only the first hello world would be styled\r\n<div>\r\n<div className='text-center' style={{\r\n    color:'green',\r\n    fontSize: '30px'\r\n    }}> \r\n    <h> Hello, world!</h>\r\n</div>\r\n<div>\r\n    hello\r\n</div>\r\n</div>\r\n)\r\n\r\nthis way everthing gets that style\r\n<div style={{\r\n                color:'green',\r\n                fontSize: '30px' }}>\r\n                <div className='text-center'>\r\n                    <h> Hello, world!</h>\r\n                </div>\r\n                    <div>\r\n                        hello\r\n                    </div>\r\n            </div>\r\n*/","map":{"version":3,"sources":["C:/Users/Admin/OneDrive/Desktop/blockchainstuff/EthDevTut1/defi-staking-app-starter/defi-staking-app-starter/src/components/App.js"],"names":["React","Component","Navbar","Web3","Tether","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","w3","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","tetherBalance","methods","balanceOf","state","props","rwd","decentralBank","rwdBalance","stakingBalance","loading"],"mappings":";;;;;;;;AAAA;AACA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;IAEMC,G;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;;;;;;;;;;qBAIHC,MAAM,CAACC,Q;;;;;AACND,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd;;uBACMD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AACH,oBAAGH,MAAM,CAACE,IAAV,EAAgB;AACnBF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACC,iBAFE,MAEE;AACDJ,kBAAAA,MAAM,CAACK,KAAP,CAAa,2CAAb;AACH;;;;;;;;;;;;;;;;;;;;;;;;;AAICC,gBAAAA,E,GAAKN,MAAM,CAACE,I;;uBACII,EAAE,CAACC,GAAH,CAAOC,WAAP,E;;;AAAhBC,gBAAAA,O;AACN,qBAAKC,QAAL,CAAc;AAACD,kBAAAA,OAAO,EAAEA,OAAO,CAAC,CAAD;AAAjB,iBAAd;;uBACwBH,EAAE,CAACC,GAAH,CAAOI,GAAP,CAAWC,KAAX,E;;;AAAlBC,gBAAAA,S;AAEN;AACMC,gBAAAA,U,GAAalB,MAAM,CAACmB,QAAP,CAAgBF,SAAhB,C,EAA2B;;AAC9C,oBAAGC,UAAH,EAAc;AACJE,kBAAAA,MADI,GACKd,IAAI,CAACK,GAAL,CAASU,QAAT,CAAkBrB,MAAM,CAACsB,GAAzB,EAA8BJ,UAAU,CAACK,OAAzC,CADL;AAEV,uBAAKT,QAAL,CAAc;AAACM,oBAAAA,MAAM,EAANA;AAAD,mBAAd;AACII,kBAAAA,aAHM,GAGUJ,MAAM,CAACK,OAAP,CAAeC,SAAf,CAAyB,KAAKC,KAAL,CAAWd,OAApC,CAHV,EAGuD;AACpE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QASL;;;;AACA,eAAYe,KAAZ,EAAkB;AAAA;;AAAA;;AACd,6EAAMA,KAAN;AACA,UAAKD,KAAL,GAAa;AACTd,MAAAA,OAAO,EAAE,KADA;AAETO,MAAAA,MAAM,EAAE,EAFC;AAGTS,MAAAA,GAAG,EAAE,EAHI;AAITC,MAAAA,aAAa,EAAE,EAJN;AAKTN,MAAAA,aAAa,EAAE,GALN;AAMTO,MAAAA,UAAU,EAAE,GANH;AAOTC,MAAAA,cAAc,EAAE,GAPP;AAQTC,MAAAA,OAAO,EAAE;AARA,KAAb;AAFc;AAajB,G,CAGD;AACA;;;;;6BACQ;AACJ;AAAA;AAAS;AACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAI,KAAKN,KAAL,CAAWd,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,eAEI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAFJ;AADJ;AAQH;;;;EAnEahB,S;;AAwElB,eAAeI,GAAf,C,CAGA;;AAEA","sourcesContent":["//main application where render everything core output (mothership)\r\nimport React, {Component} from \"react\";\r\nimport './App.css';\r\nimport Navbar from \"./Navbar\";\r\nimport Web3 from \"web3\";\r\nimport Tether from \"../truffle_abis/Tether.json\"\r\n\r\nclass App extends Component{\r\n\r\n    async UNSAFE_componentWillMount(){\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n    }\r\n\r\n    async loadWeb3(){// check that eth open , aka the metamask is open\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if(window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n            }else{\r\n                window.alert('no eth browser detected, lookup meta mask')\r\n            }\r\n        }\r\n    \r\n    async loadBlockchainData(){\r\n        const w3 = window.web3\r\n        const account = await w3.eth.getAccounts()\r\n        this.setState({account: account[0]})\r\n        const networkId = await w3.eth.net.getId()\r\n        \r\n        //load the contract\r\n        const tetherData = Tether.networks[networkId] // pulled from the json\r\n        if(tetherData){\r\n            const tether = web3.eth.Contract(Tether.abi, tetherData.address)\r\n            this.setState({tether})\r\n            let tetherBalance = tether.methods.balanceOf(this.state.account) //make it a let cause changing variable\r\n        }\r\n        \r\n    }\r\n\r\n    async loadContracts(){\r\n\r\n    }\r\n    \r\n    \r\n    //props part of react allow to parse over info\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            account: '0x0',\r\n            tether: {},\r\n            rwd: {},\r\n            decentralBank: {},\r\n            tetherBalance: '0',\r\n            rwdBalance: '0',\r\n            stakingBalance: '0',\r\n            loading: true\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // we parse the this.state.account to navbar\r\n    //react code goes in here \r\n    render(){\r\n        return(  //divs are just containers that can include styles, e.g text-centre comes from bootstrap\r\n            <div>\r\n                <Navbar account = {this.state.account}/>\r\n                <div className='text-center'>\r\n                    <h1></h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n//class name invokes bootstrap styles seen in index.js\r\n\r\n/*   this way only the first hello world would be styled\r\n<div>\r\n<div className='text-center' style={{\r\n    color:'green',\r\n    fontSize: '30px'\r\n    }}> \r\n    <h> Hello, world!</h>\r\n</div>\r\n<div>\r\n    hello\r\n</div>\r\n</div>\r\n)\r\n\r\nthis way everthing gets that style\r\n<div style={{\r\n                color:'green',\r\n                fontSize: '30px' }}>\r\n                <div className='text-center'>\r\n                    <h> Hello, world!</h>\r\n                </div>\r\n                    <div>\r\n                        hello\r\n                    </div>\r\n            </div>\r\n*/"]},"metadata":{},"sourceType":"module"}